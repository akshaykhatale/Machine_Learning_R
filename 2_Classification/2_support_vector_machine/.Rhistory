setwd("~/Desktop/ML/R/2_Classification/2_support_vector_machine")
install.packages('e1071')
#Support Vector Machine
#Importing Dataset
dataset=read.csv("Social_Network_Ads.csv")
dataset=dataset[,3:5]
#Spliting data into trainig and testing
library("caTools")
set.seed(123)
split=sample.split(dataset$Purchased,SplitRatio = 0.75)
training_set=subset(dataset,split==TRUE)
test_set=subset(dataset,split==FALSE)
#Feature Scaling
training_set[,1:2]=scale(training_set[,1:2])
test_set[,1:2]=scale(test_set[,1:2])
#SVM on training set
#install.packages('e1071')
library(e1071)
classifier=svm(formula=Purchased~.,
data=training_set,
type='C-Classification'
kernel='linear')
library(e1071)
classifier=svm(formula=Purchased~.,
data=training_set,
type='C-classification'
kernel='linear')
classifier=svm(formula=Purchased~.,
data=training_set,
type='C-classification'
kernel='linear')
classifier=svm(formula=Purchased~.,
data=training_set,
type='C-classification',
kernel='linear')
#Predicting the Test on data
prob_pred=predict(classifier,type = 'response',newdata = test_set[-3])
y_pred=ifelse(prob_pred>0.5,1,0)
#Support Vector Machine
#Importing Dataset
dataset=read.csv("Social_Network_Ads.csv")
dataset=dataset[,3:5]
#Spliting data into trainig and testing
library("caTools")
set.seed(123)
split=sample.split(dataset$Purchased,SplitRatio = 0.75)
training_set=subset(dataset,split==TRUE)
test_set=subset(dataset,split==FALSE)
#Feature Scaling
training_set[,1:2]=scale(training_set[,1:2])
test_set[,1:2]=scale(test_set[,1:2])
#SVM on training set
#install.packages('e1071')
library(e1071)
classifier=svm(formula=Purchased~.,
data=training_set,
type='C-classification',
kernel='linear')
#Predicting the Test on data
prob_pred=predict(classifier,type = 'response',newdata = test_set[-3])
y_pred=ifelse(prob_pred>0.5,1,0)
prob_pred=predict(classifier,newdata = test_set[-3])
y_pred=ifelse(prob_pred>0.5,1,0)
prob_pred=predict(classifier,newdata = test_set[-3])
#Creating The confusion Metrix
cm=table(test_set$Purchased ,y_pred)
cm
#Support Vector Machine
#Importing Dataset
dataset=read.csv("Social_Network_Ads.csv")
dataset=dataset[,3:5]
#Spliting data into trainig and testing
library("caTools")
set.seed(123)
split=sample.split(dataset$Purchased,SplitRatio = 0.75)
training_set=subset(dataset,split==TRUE)
test_set=subset(dataset,split==FALSE)
#Feature Scaling
training_set[,1:2]=scale(training_set[,1:2])
test_set[,1:2]=scale(test_set[,1:2])
#SVM on training set
#install.packages('e1071')
library(e1071)
classifier=svm(formula=Purchased~.,
data=training_set,
type='C-classification',
kernel='linear')
#Predicting the Test on data
prob_pred=predict(classifier,newdata = test_set[-3])
#Creating The confusion Metrix
cm=table(test_set$Purchased ,y_pred)
cm
View(dataset)
View(dataset)
#Feature Scaling
training_set[-3]=scale(training_set[-3])
test_set[-3]=scale(test_set[-3])
#SVM on training set
#install.packages('e1071')
library(e1071)
classifier=svm(formula=Purchased~.,
data=training_set,
type='C-classification',
kernel='linear')
#Predicting the Test on data
prob_pred=predict(classifier,newdata = test_set[-3])
#Creating The confusion Metrix
cm=table(test_set$Purchased ,y_pred)
cm=table(test_set[,3] ,y_pred)
#Predicting the Test on data
prob_pred=predict(classifier,type='response',newdata = test_set[-3])
#Creating The confusion Metrix
cm=table(test_set[,3] ,y_pred)
cm
y_pred=predict(classifier,type='response',newdata = test_set[-3])
#Creating The confusion Metrix
cm=table(test_set[,3] ,y_pred)
cm
library(e1071)
classifier=svm(formula=Purchased~.,
data=training_set,
type='C-classification',
kernel='radial basis')
library(e1071)
classifier=svm(formula=Purchased~.,
data=training_set,
type='C-classification',
kernel='linear')
#Predicting the Test on data
y_pred=predict(classifier,type='response',newdata = test_set[-3])
#Creating The confusion Metrix
cm=table(test_set[,3] ,y_pred)
#Visualizing the Training Data
#install.packages('ElemStatLearn')
library(ElemStatLearn)
set = training_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
prob_set = predict(classifier, type = 'response', newdata = grid_set)
y_grid = ifelse(prob_set > 0.5, 1, 0)
plot(set[, -3],
main = 'SVM (Training set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
#Visualizing the Training Data
#install.packages('ElemStatLearn')
library(ElemStatLearn)
set = training_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
y_grid = predict(classifier, type = 'response', newdata = grid_set)
plot(set[, -3],
main = 'SVM (Training set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
#Visualizing the Testing Data
#install.packages('ElemStatLearn')
library(ElemStatLearn)
set = test_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
y_grid = predict(classifier, type = 'response', newdata = grid_set)
plot(set[, -3],
main = 'SVM (Test set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
